public function cpuTurn($playerIndex)
    {
        Log::info("cpuTurn: CPUプレイヤー（インデックス {$playerIndex}）のターン開始");

        // ゲーム状態をセッションから取得
        $players = session('players');
        $trash = session('trash', []); // トラッシュデッキ
        $currentPlayer = session('currentPlayer');
        $gameOver = session('gameOver');

        // CPUの手札を取得
        $currentPlayerData = $players[$playerIndex];
        $hand = $currentPlayerData['hand'];

        // カウントを更新
        $this->updateCardCounts($playerIndex);

        // カウント0のカードをフィルタリング
        $countZeroCards = array_filter($players[$playerIndex]['hand'], function($card) {
            return $card['count'] === 0;
        });

        if (count($countZeroCards) > 0) {
            if (count($trash) === 0) {
                Log::info("cpuTurn: トラッシュが空。連続するカードの確認を行います。");

                // 連続するカードのカウントを計算
                foreach ($players[$playerIndex]['hand'] as &$card) {
                    $count = 0;
                    while ($this->hasConsecutiveCard($players[$playerIndex]['hand'], $card, $count + 1)) {
                        $count++;
                    }
                    $card['count'] = $count;
                }
                unset($card); // 参照を解除

                // 最大カウントを取得
                $maxCount = max(array_map(function($card) {
                    return $card['count'];
                }, $players[$playerIndex]['hand']));

                if ($maxCount > 1) {
                    // 最大カウントのカードをフィルタリング
                    $maxCountCards = array_filter($players[$playerIndex]['hand'], function($card) use ($maxCount) {
                        return $card['count'] === $maxCount;
                    });

                    // ランダムに選択
                    $selectedCard = $this->getRandomElement($maxCountCards);
                    $selectedCards = [$selectedCard];

                    // 次の連続カードを追加
                    for ($i = 1; $i <= $selectedCard['count']; $i++) {
                        $nextRank = $selectedCard['rank'] + $i;
                        $nextCard = $this->findCard($players[$playerIndex]['hand'], $selectedCard['suit'], $nextRank);
                        if ($nextCard) {
                            $selectedCards[] = $nextCard;
                        }
                    }

                    // カードをトラッシュに移動
                    $this->moveCardsToTrash($selectedCards, $playerIndex);
                    Log::info("cpuTurn: 連続するカードをトラッシュに移動しました。", ['cards' => $selectedCards]);

                } else {
                    Log::info("cpuTurn: 連続するカードが見つからなかったため、同じランクのカードを確認します。");

                    // 同じランクのカードのカウントを計算
                    foreach ($players[$playerIndex]['hand'] as &$card) {
                        $card['count'] = $this->countSameRankCards($players[$playerIndex]['hand'], $card['rank']);
                    }
                    unset($card); // 参照を解除

                    // 最大カウントを取得
                    $maxCount0 = max(array_map(function($card) {
                        return $card['count'];
                    }, $players[$playerIndex]['hand']));

                    if ($maxCount0 > 1) {
                        // 最大カウントのカードをフィルタリング
                        $maxCount0Cards = array_filter($players[$playerIndex]['hand'], function($card) use ($maxCount0) {
                            return $card['count'] === $maxCount0;
                        });

                        // ランダムに選択
                        $selectedCard = $this->getRandomElement($maxCount0Cards);
                        // 同じランクのカードを選択
                        $selectedCards = array_filter($players[$playerIndex]['hand'], function($card) use ($selectedCard) {
                            return $card['rank'] === $selectedCard['rank'];
                        });

                        // カードをトラッシュに移動
                        $this->moveCardsToTrash($selectedCards, $playerIndex);
                        Log::info("cpuTurn: 同じランクのカードをトラッシュに移動しました。", ['cards' => $selectedCards]);

                    } else {
                        // ランダムに1枚選択してトラッシュに移動
                        $selectedCard = $this->getRandomElement($players[$playerIndex]['hand']);
                        $this->moveCardsToTrash([$selectedCard], $playerIndex);
                        Log::info("cpuTurn: ランダムに選択したカードをトラッシュに移動しました。", ['card' => $selectedCard]);
                    }
                }
            } elseif (count($trash) === 1) {
                Log::info("cpuTurn: トラッシュが1枚のみ。カウント0のカードからランダムに選択します。");

                // カウント0のカードからランダムに選択
                $selectedCard = $this->getRandomElement($countZeroCards);
                $this->moveCardsToTrash([$selectedCard], $playerIndex);
                Log::info("cpuTurn: トラッシュが1枚のため、選択したカードをトラッシュに移動しました。", ['card' => $selectedCard]);
            } else if (count($trash) > 1) {
                // すべてのトラッシュカードが同じランクか確認
                $firstTrashRank = $trash[0]['rank'];
                $allTrashSameRank = array_reduce($trash, function($carry, $card) use ($firstTrashRank) {
                    return $carry && ($card['rank'] === $firstTrashRank);
                }, true);
            
                if ($allTrashSameRank) {
                    // トラッシュ内が全て同じランクの場合
            
                    // countOneCardsの中からジョーカー以外をランダム取得
                    $filteredCountOneCards = array_filter($countOneCards, function($card) {
                        return $card['suit'] !== 4; // 4がジョーカー
                    });
            
                    if (empty($filteredCountOneCards)) {
                        // 全てジョーカーの場合の対策（必要に応じて処理）  
                        // ここではとりあえず1枚ランダムに取得
                        $selectedCard = $this->getRandomElement($countOneCards);
                    } else {
                        $selectedCard = $this->getRandomElement($filteredCountOneCards);
                    }
            
                    // 同ランクのカードを取得
                    $sameRankCards = array_filter($players[$playerIndex]['hand'], function($card) use ($selectedCard) {
                        return $card['rank'] === $selectedCard['rank'];
                    });
            
                    // 同ランクカード数がトラッシュ数より少ない場合、ジョーカーのrankを合わせる
                    if (count($sameRankCards) < count($trash)) {
                        foreach ($countOneCards as &$card) {
                            if ($card['suit'] === 4) { 
                                // ジョーカーのランクをselectedCardに合わせる
                                $card['rank'] = $selectedCard['rank'];
                            }
                        }
                        unset($card);
                        // 再取得
                        $sameRankCards = array_filter($players[$playerIndex]['hand'], function($card) use ($selectedCard) {
                            return $card['rank'] === $selectedCard['rank'];
                        });
                    }
            
                    // トラッシュ枚数分のカードを切り出してトラッシュへ移動
                    $cardsToTrash = array_slice($sameRankCards, 0, count($trash));
                    $this->moveCardsToTrash($cardsToTrash, $playerIndex);
            
                } else {
                    // トラッシュ内が同ランクではない場合、同スートの連続性を狙う
                    do {
                        // countOneCardsからジョーカー以外をランダムに選択
                        $filteredCountOneCards = array_filter($countOneCards, function($card) {
                            return $card['suit'] !== 4;
                        });
                        if (empty($filteredCountOneCards)) {
                            // 全ジョーカーの場合の救済処理（必要なら実装）
                            $selectedCard = $this->getRandomElement($countOneCards);
                        } else {
                            $selectedCard = $this->getRandomElement($filteredCountOneCards);
                        }
            
                        $sameSuitCards = array_filter($players[$playerIndex]['hand'], function($card) use ($selectedCard) {
                            return $card['suit'] === $selectedCard['suit'];
                        });
            
                        $selectedCards = [$selectedCard];
                        $jokerCount = 0;
            
                        // トラッシュ枚数分連続カードまたはジョーカーによる補完を試みる
                        for ($i = 0; $i < count($trash) - 1; $i++) {
                            $randomAction = rand(0, 1);
                            $ranks = array_column($selectedCards, 'rank');
                            $maxRank = max($ranks);
                            $minRank = min($ranks);
            
                            // maxRank+1かminRank-1を探す
                            $nextCard = $this->findCardInArray($sameSuitCards, $selectedCard['suit'], $maxRank + 1);
                            $prevCard = $this->findCardInArray($sameSuitCards, $selectedCard['suit'], $minRank - 1);
            
                            // randomActionが0ならnext優先、1ならprev優先
                            if ($randomAction === 0) {
                                if ($nextCard) {
                                    $selectedCards[] = $nextCard;
                                } else if ($prevCard) {
                                    $selectedCards[] = $prevCard;
                                } else if ($jokerCount === 0) {
                                    $jokerCount++;
                                    // jokerを使ってギャップを埋める
                                    $selectedCards = $this->useJokerToFillGap($sameSuitCards, $selectedCards);
                                } else {
                                    // これ以上続かない
                                    break;
                                }
                            } else {
                                if ($prevCard) {
                                    $selectedCards[] = $prevCard;
                                } else if ($nextCard) {
                                    $selectedCards[] = $nextCard;
                                } else if ($jokerCount === 0) {
                                    $jokerCount++;
                                    $selectedCards = $this->useJokerToFillGap($sameSuitCards, $selectedCards);
                                } else {
                                    break;
                                }
                            }
                        }
            
                        // 必要枚数揃ったらトラッシュへ移動
                        if (count($selectedCards) === count($trash)) {
                            // rankでソート
                            usort($selectedCards, function($a, $b) {
                                return $a['rank'] <=> $b['rank'];
                            });
                            $this->moveCardsToTrash($selectedCards, $playerIndex);
                        }
            
                    } while (count($selectedCards) !== count($trash));
                }
            }
        } else {
            Log::info("cpuTurn: カウント0のカードが存在しないため、パスします。");
            $this->pass($playerIndex);
        }
    }

    /**
     * カードの連続を確認するヘルパーメソッド
     */
    private function hasConsecutiveCard($hand, $card, $offset)
    {
        $nextRank = $card['rank'] + $offset;
        return $this->findCard($hand, $card['suit'], $nextRank) !== null;
    }

    /**
     * 特定のスートとランクのカードを手札から探すヘルパーメソッド
     */
    private function findCard($hand, $suit, $rank)
    {
        foreach ($hand as $card) {
            if ($card['suit'] === $suit && $card['rank'] === $rank) {
                return $card;
            }
        }
        return null;
    }

    /**
     * 同じランクのカードの数をカウントするヘルパーメソッド
     */
    private function countSameRankCards($hand, $rank)
    {
        return count(array_filter($hand, function($card) use ($rank) {
            return $card['rank'] === $rank;
        }));
    }

    /**
     * 配列からランダムな要素を取得するヘルパーメソッド
     */
    private function getRandomElement($array)
    {
        if (empty($array)) {
            return null;
        }
        $keys = array_keys($array);
        $randomKey = $keys[array_rand($keys)];
        return $array[$randomKey];
    }

    private function findCardInArray($cards, $suit, $rank) 
    {
        foreach ($cards as $card) {
            if ($card['suit'] === $suit && $card['rank'] === $rank) {
                return $card;
            }
        }
        return null;
    }
    
    private function useJokerToFillGap($sameSuitCards, $selectedCards) 
    {
        // Jokerによるギャップ埋め処理例
        $ranks = array_column($selectedCards, 'rank');
        $maxRank = max($ranks);
        $minRank = min($ranks);
    
        // maxRank+2, minRank-2などを探してJokerランクを決定
        $next2Card = $this->findCardInArray($sameSuitCards, $selectedCards[0]['suit'], $maxRank + 2);
        $prev2Card = $this->findCardInArray($sameSuitCards, $selectedCards[0]['suit'], $minRank - 2);
    
        $jokerAdjustment = 0;
        if ($next2Card && $prev2Card) {
            $jokerAdjustment = rand(0,1) === 0 ? $maxRank + 1 : $maxRank - 1;
        } else if ($prev2Card) {
            $jokerAdjustment = $maxRank - 1;
        } else {
            $jokerAdjustment = $maxRank + 1;
        }
    
        // Jokerのrankを調整
        // $countOneCards等、ジョーカーを含む配列が必要
        global $countOneCards; // グローバル利用はあまり望ましくないため、実際は引数で渡すこと推奨。
        foreach ($countOneCards as &$card) {
            if ($card['suit'] === 4) {
                $card['rank'] = $jokerAdjustment;
                $selectedCards[] = $card;
            }
        }
        unset($card);
    
        return $selectedCards;
    }

    /**
     * パスを処理するヘルパーメソッド
     */
    private function pass($playerIndex)
    {
        Log::info("pass: プレイヤー（インデックス {$playerIndex}）がパスしました。");
        // パスの処理内容に応じて実装
        // 例えば、ターンを次に進めるなど
    }